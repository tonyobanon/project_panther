
If a container joins during an app installation,
pause, until installation is complete


There should be a pre-defined timeframe between when a master is
appointed, and when he fully assumes the role
that value should be AbstractTaskDelegate.intervalInSecs()


We need to create a mechanism of transmitting and running
master onboarding tasks. See directly below for more info:

We need to precisely monitor master shutdowns
1. First, when we receive the SIGTERM command, we wait till
the next task execution happens (Always dispatch event!)


2. Then CAREFULLY considering all possible offsets, send the onboarding task
to the incoming master ensuring that the next execution matches what it would have been.
Since all task exeecution times have been set based on this.
Note: this is where our leeway comes into play 



Migrate S3Cache evictor (in S3Adapter) to Task Executor







Functions and ClusterFunction

Rename *NodeRole to *MemberRole

bucketList and shutdown(...) in InfinispanCacheFactory

Platform.getState().getContext();

Introspect ComputeQuotaExceededEvent

Add support for distributed logging

What's up with Scheduler

What's up with TemplateFactory

If ENV is local, open up a port, that will
be used to communicate with the studio

Why is SpiDelegateHandler using a multimap
when it is wrapping it a 1 to 1 mapping. Why not
just use Cache?


ARCH 28:
I really really need to think about some solution to perform in place cache updates that may involve complex orchestration
Update Member.addRole(...)
RealmDelegate: Inplace updates?

Complete MemberSetupFunction

Don't forget SessionImpl oo

Deprecate CacheAdapter

FusionHelper


Regarding my thoughts around persisting volatile cache data to disk?
This is now a no-no. This has to be in the DB. The problem?
Finding a way top activate a hook

Use Zoo Keeper for platform clustering 
https://kubernetes.io/docs/tutorials/stateful-application/zookeeper/


Use vertX Cluster Manager 


Register hook, inorder to help in distinguishing between cluster vs node shutdown

Think about what happens to the cluster when the JVM crashes due to an exception


Implement Platform.setState(...)



Configure Kubernetes configuration to terminate gracefully
https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-terminating-with-grace


In NodeRoleDelegate, Add functionality to elect a master node, because YES masters can leave


For ACTIVE_DELEGATES to be removed the platform will need to pause all traffic


Streamline cluster joining workflow such that when we
know what subet the node is, we can simple get the first
address in the space and assume it's the


Streamline app dependency model
i.e If the app is not found when the dependant app tries to install, FAIL


FormModel should add form hooks to RealmDelegate

We need to work on CL class hierarchy

Todo: unregister section/fields and associated refs
Todo: unregister functionalities and associated refs

Todo: when unregistering the above, we need to ask the user which sibling should take it's place

Add wide support hooks to realm delegate;
* This will also help FormModel to listens for when form sections and fields are deleted

	
			

Log everything!


Appclassloader needs to keep track of dependency structure for classes
within an app. This will be critically used to determine
* Whether there is circular reference (not allowed)
* The order with which classes will be unregistered 


Scrap the concept of Ids from the form API

Allow delegates to be able to configure distributed caches to persist data

Accross all delegate, determine when new rClasses additions should trigger a platform restart

Adapter config can be passed in as Jvm flags

Upgrade RBModel into a Delegate

When loading the platform, a user context

Stop throw throwing errors from init, add and remove

RealmDelegate Todo:

* Prepare removal logic

* Post addAll(...) - inorder to prepare realms ahead of time


^ -> Two sub realms can extend a single parent
	 However, they must not contain any similar reference.
	 In a scenario, where they do contain similar references, 
	 we may need the user's intervention



Note: RealmDelegate always assume annotation defaults

Check for Cloneables and implement

Detect the order of the realm classes in an
advanced way such that the order is as follows
- Standalone ancestor

- Non-standalone child (This is where the clashes may happen)

- Standalone child 



validatingReferences if you have parent - modify, delete



We need to make consideration for conflict scenarios, by:
Detect such clashes and inform the user of such






Probe field.getId() and section.getId()


Probe referenceKKey


Notes:
* Complete sections are replaced - optionally using importFields()

* To delete a form section from a child realm , just reference it, and do not import fields

* How is section Id used?


Right now, we are doing something really tricky
- In SPILocatorHandlerImpl#addClasses() we are
also loading abstract classes. However, in delegates,
we always instanting the class object as though it
is always a concrete class
I think we should stop loading abstract classes
but we need to first investigate





Do realms have a default role
where all functionalities are assigned?
we should have this, Check role model


Secure all maps and collections by making
them immutable

Tune infinispan as defined here: https://infinispan.org/docs/stable/titles/tuning/tuning.html

See here: https://access.redhat.com/solutions/873573 to switch infinispan from multicast



Disable load balancing feature in 


remove future.joins in TaskDelegate and entire codebase

onImplementation?

Remove getAll() to getLocalStore()

Fix add0 to validate resource count moving forward


Fix NodeRoleHelper

Create inheritance hierarchy for services
Then protected AbstractAdapterDelegate#getAdapters properly


Add support for @Inject

Remove CacheAdapter

eviction?

expire-related recursion

Implement shutdown() in all cache factories

OBJECT STORAGE FACTORY

updateKeyExpiry on access by continuously pushing the date forward (only based on i)

setKeyExpiry(e) on expire(..), removeKeyExpiry on del(..)

setKeyExpiry(i) on invalidate(..)



REDIS

updateKeyExpiry on access by re-invoking .expire(..)

removeKeyExpiry(..) on expire(..), removeKeyExpiry on del(..)

setKeyExpiry(..) on invalidate(..)




redis not calling key() properly, fix

Fix futures

del, sdel,hdel
expire, invalidate




In ObjectStorageCache, add an algo
to preset dates, so the reaper can do
less work




In In ObjectStorageCache, allow developers
to decide whether to maintain a keylist


=



In delegate implementations, is the remove(..) method
implemented correctly? no
The idea is that they should really return the resources that
could not actually be removed, for any reason




Migrate Fusion service invokation from reflection to LambdaMetafactory
see https://dzone.com/articles/java-reflection-but-faster


NodeRole *** (What happens in here, since a thread is created)

Service
Model
ScheduledTask




** - We cannot afford to outrightly disable
thread creation because threads will need to be
created by third party libraries in the scenarios:
1. netty - For inter-node communication
2. jetty - For http server orchestration

Hence, we need to update our security manager to
factor this in

For the above I need to properly run some
tests inorder to ascertain the acceptable 
number of skipOffsets for the stack frame



Implement MasterNodeRole.getAvailableNode()


Implement SecurityManager.getThreadGroup()
and integrate that into our workflow

In the Security Manager, allow libraries
such as netty and jetty to create threads
without any issues. Hence, we need a 
whitelist mechanism, that's intelligent
If it's not, even third parties can use
netty and jetty to create threads too





** - Any Internal API that's using a restricted JVM
should be annotated properly, to avoid attacks



** - Critically test RuntimeIdentity.hasTrust() - ish


Implement comments in Permissions.init() and other methods in this claa
the above is very top priority

   
LAMBDA_META_FACTORY_CLASS?


Test that when subclasses of SpiDelegate call a final method
inside SpiDelegate, the stackframe distinguishes between
the two classes

check out AppClassLoader static block


Implement MasterNodeRole.getAvailableNode. This is generally computed
by taking some aggreagated node metrics into consideration,
i.e CPU/memory usage e.t.c



I think the Appclassloader prevents access to
.internal.. packages, investigate


Currently, our infinispan cluster assumes that all nodes
exists on the same local network.. Well, this may not always
be the case, especially because we allow a node from another
network to join the cluster.
The side effect of this is that multiple clusters will be formed
Which again, can be tricky. Please fix


Add in-memory cache adapter backed by infinispan.

Delegate resource maps should use an IMDG


Properly implement Scheduler
Before the above can happen, we need to create a cluster-wide data grid


When the master is uploading assets, they should be transferred
to other cluster nodes
Also, when a new node joins, he should fetch assets


Update config.json to use correct delegate class locations



Make ActivityStream optionally searchable
Hence, if this is enabled, the ActivityStreamModel
should write to search..




Listing Contexts
DB
Realm



Search for occurences of SimpleField. e.t.c you 'll notice the following
* ids do not seem to be unique



In DB API, I am currently converting Date to Long, which should be done by the DB PublicHolidayTableSpec.


Supported autogenerated Ids for strings as well
Annotate relevant tables with @AutoGenerated

If ExpressionSpecBuilder comtains an empty projection list, project all in the spec

Scan to emsure that we are not unnecessarily using ReturnValue.ALL_NEW

Table modeller should properly infer DB data types, i.e List<Long> == NS(Number Set)

Functionalities
Roles

When DB.getTable() is called, add prefix based on appId

Class Watching


DB API:
1. Add support for dates as an item attribute
2. Allow primary keys to be auto generated
3. Some attributes in BaseUserTable should be spinned off to SocialMediaHandlesTable


Note: delegate of active types must ensure that
they set thread context classloader before
executing code from resource classes


Break up Json Api from Fusion


Create streamlined flow for Spi Locator/Delegates


Flesh out DB Api and models


Thread spinners: [
	NodeRegistry
	FileSystemProviderUtil
	ExecutorFactory
]



Finish LocalEnvironment

App Watching

Rewrite RedisCacahe, as the Futures were not designed properly

Implement a package convention where app java packages
begin with a prefix perculiar to that app, because

1. We may set a platform class to FIND_FIRST but the
   AppClassLoader may load a malicious class instead
   
2. If two apps have similar class names, AppClassLoader.addDelegationType(..)
   may be called for one of them, say during service registration..
   and this will apply to the other


CodeSecurity does not scan for apps classpath


Manage how the LoggerFactory uses an
execution factory to output log data


Create a mechanism to manage threads created from
untrusted apps

///////////////////////////

Should ClientRBRef bw supported as a column type?

For properties that are lists and maps
try to add a default

Add a feature on QOpt that allows only items with specific attribute values
to be projected in. This will help us optimize these indexes

In the DB Api, add helper annotation table fields, i.e
1. Serialize
2. Auto generated

////////////////////////////


Figure out unload() in SpiDelegate

The credentials path is broken in GoogleHelper:31

When provisioning apps, eargerly load all classes
into the app's class loader

Use static analysis to process @Final annotation. This prevents
children of an interface from overriding a method, even though
it is valid in the Jvm

Implement the CodeSecurity class

Finish work on DelegateInitResult in SpiDelegateHandler
Finish work on Resource


Properly group singletons because I can see that some classes
work together e.h the SPI implementations

Stop using Platform Internal

Moving forward, use collections from http://www.magicwerk.org/page-collections-overview.html

These components needs DB:
1. User defined permissions
2. SpiBase's trusted app list



A new attack vector:
1. A malicious resource class is created
2. It prevents being loaded by using a different class name
3. It attempts to use the SpiDelegate's rMap
4. The SPI delegate grants it access because of its type
5. It fills up the rMap's space

When Fusion request come in, inorder we get the appId
and check

Modify qopt tools to use the adapter delegate's cache

Add migration logic for all AdapterLogic

Work on UIContext

Write logic to determine if Platform is installed
Also, introspect getResourcePath() -> Do we need to create it ahead of time?

Build Internal Code Generator that works based using predefined annotations, see ThreadSecurity.verify()

Integrate Apache solr (if it's compatible with Jvm FileSystemProvider)

determine if item count can be added to the index description in the Database API

create a user-facing seetings that helps describes the provisioned throughput, as this is not part of the Database API

use JsonParser singleton instead of GsonFactory

Implement migration for all adapters

Add security manager for new File(..)

Replace gson.JsonObject with fusion

Go through delegate and ensure that they are consuming resources in init().. 

Simplify enum.from

On installation, detect that the user is an admin

I noticed that delegates have not been using createResourceMaps()..


apps, adapter_config, spi_config, crypto, web_assets

Note: properly synchrionize when writing to above files

** Clustering scenarios
1. If a master leaves, the slaves should rejoin


** ThreadSecurity scenarios
1. When clustering and serving Http requests, manage how
   threads are marked as secure

Add Platform SpiDelegate


###	CREATING AN ADAPTER TYPE

*  Note: Only trusted can create

1. Update the AdapterType enum by adding a new constant
   
2. Create an interface that implements the Adapter class. 
   Then add relevant method signatures / static method(s).
   You also need to override getType() method
   
3. Create the delegate and it's abstract super class (that 
   directly extends AbstractAdapterDelegate)
   AbstractAdapterDelegate
   
5. If you need to extend the AdapterConfig class inorder,
   to store and load your configuration files remeber to
   use the AdapterType created in step 1



Rewrite the init function of delegates of better take advantage of DelegateInitResult

Add option in BaseEvt to indicate that no more than one listener should be registered

CEA-1 SpiDelegate.init() should return an object, this is important because there are scenarios where the delegate needs more information to continue


finish up services for fs,cache,db,crypto
Implement ability to route request in the cluster. Also, take service affinity into consideration

Ensure that all calls to getDelegate(..) have a cached local copy

Realm Consolidation
References of Class.getName()
Factor in platform updates as part of classpath scanning workflow
In Database setup, use a static method to retrieve Calcite schema factory

A lot of work has to go into rendering of forms, and ability to add custom helpers to customize rendering.

Create more fs adapters, Google Drive, Amazon s3, JimFs
Create more db adapters, MySQL, postgres, oracle , create a SQLAdapter super class, and just override name, title, logo


* - Prototype Available, but not feature complete
# - Work in progress

Security Manager / Permissions (Create more permission sets) *
SPI Delegate start *
Clustering *
Realms: forms, functionality, Consolidate Form field repository #
Listable.authenticate still uses RoleModel.isAccessAllowed, fix this
Move spec.baseObjectType
Implement ObjectUtils.serialize/deserialize
Implement session invalidation
Implement CacheBackedMap (sessions depend on this)


When adding to Cache, we need to map appId to key due to the reason below:
We will need to flush out all entries for an app in the cache, when the app is updated.
This is because class definitions may change, and as such we may no longer be able to correctly
deserialize existing entries


Generally stop using class.getName(). To do this, scan for references, and find an alternative


Some Javax Packages are missing in Java 10


For string spliting, use patterns, instead of the String class for performance


Shared Libraries
NoSQL-like API on top of javax.sql.Connection ?

IModels


Models Rewrite

Platform Start Plan

UI
SPI Hot Reloading
Cluster Orchestration
Load Balancing
Metrics

Properly setup FontCaching for PDFBox


ServiceDelegate should work with ThreadSecurity to smartly decide which threads
are trusted



APPS TO BUILD
1. Real Estate 
2. Accounting -> OfBiz
3. Education
4. Ecommerce -> Konakart
5. CRM
6. HR
7. Manufacturing
8. Insurance



Make most methods in AbstractSpiDelegates to be final


Read Configurations
Load client assets


The workflow for starting master:
1. The user enters IAM credentials on CE website
2. CE starts the master node, passing the same credentials as Instance Tags

3. Pre-Install phase continues inside the node (for masters only)
4. In Screen 1, the user enters DB credentials, the response is saved to DB_PROFILE_FILE
5. In Screen 2, the user enters Cache credentials, the response is saved to CACHE_PROFILE_FILE
6. In Screen 3, the user enters FileSystem credentials, the response is saved to FS_PROFILE_FILE, then call FileSystemProviderImpl.init()
   will get notified
7. In Screen 4, the user enters KeyStore info, used for Https, document signing, e.t.c

8. In Screen 5,

After these have saved, the platform is restarted

8. Post-Install phase continues, here the user enters things like company information
9. The data is saved and the user is redirected to the dashboard


FileSystemProvider should add a prefix for paths




The workflow for app extraction:
1. From the marketplace, apps come as a bundled file.
2. The platform knows how to collapse the single bundled file, into seperate files
3. Then using the encrypted file system, we save the classes


Note: credentials should be passed as instance tags to auto scaled slaves


Make sure to set Thread.contextLoader (to an AppClassLoader instance) for apps, else leave it as null

We assume that classes with a AppClassLoader is a third party -> SpiDelegateHandlerImpl->isInternalDelegate


Applications should be forbidden from creating new Threads on their own,
a method should be created for them to use as an alternative


As a general rule, apps should be unable to extend Jvm Services, i.e no META-INF folder


Many times, Runtime Exceptions are thrown without using Error Objects.. Fix


In @interface EventListener, add property that indicates releveant roles





NAME		  CREDENTIAL SOURCE

Compute			 -
DB			Inherit
Caching			Init form
File System		Inherit



Font Caching
Client Assets (Store in Memory instead)
PDF
Config (DB, FS, CACHE)



SCREEN ATTRIBUTES
Route based-> Fusion
Hierarchical -> routes_mapping.json

Templating -> TemplateObjectModel
Partial Rendering -> realignite
Pre bundled components


Stress Test sequence


Seggragate APIs
Move errors and functionalities to their relevant packages


complete Realms, fields, and functionalities
complete FusionHelper


In RoleModel::init(), roles to functionality mappings should be registered in
RealmDelegate, and should be incrementally updated


ORGANIZATION_ID: {params}.abc
ORGANIZATION_ID: {headers}.abc
ORGANIZATION_ID: {body}.abc.def.ghi


Impl CacheBackedMap
Start using delegate resource maps for everything


Make Cloud-based config params visible in Cloud Environment:
 Cache, Storage, ClusterRole

By default, inMemory() in SpiDelegate to fetch Cloud environment

Check if delegate is respecting the setting in Cloud Environment
		
Add Logger SpiType as autmatic dependency for all delegates
		




FormModel should call realm delegate for predefined form sections

Decentralize FormFieldRepository



CREATE TABLE
CREATE INDEX
Write TableModify Rule
Modify Filter Rule
Write more rules for the adapter

TimeTrends, IModels, Model Versioning, 
Virtual Host Configuration, KeyStoreManager


Jdbc, Fusion

Disable Assertions on Production


Scan SPIs (i.e. Table, CloudEnvironment)
Is Database Selected (Read Instance Meta file)?
Is Cache Selected (Read Instance Meta file)?
If yes, Start all SPIs, Launch Dashboard
If no, Start only Service and UI Spis, Launch DatabaseSetup/CacheSetup, Start all SPIs, Launch Dashboard
Call Hooks


database_profile


{
 
}


Migrate from Reflection to LambdaMetafactory
see https://dzone.com/articles/java-reflection-but-faster



Implement Service Affinity


@ModelMethod
Further split functionalities, roles, object, subject types
Refractor all Delegate init() methods to look like get(this::addRealm);
All Delegates should use the internal maps for storage
Create StorageInterfaces and incrementally rewrite Model Methods
Model Abstraction, see: eaa
Improve Logging
App dependendies(with version) declaration

Realm
Cache

name, reqiresApplication, Form

SPI Delegate tasks
    init():
    A config flag should exist to tell if a realm's form data has been stored.
    If so, or not, do the appropriate
     




* Discover, * Map functionalities


Sessions : 108, 112 Depends on Cache SPI and were commented out

Find a better alternative to getCanonicalFunctionality()
rename SPIDelegate.get to forEach, i.e init()
Cache, Storage, Models.start(), UI, , KeyStoreManager, Payments, Reporting, Metrics,
ClusteringError.from
CloudEnvironment.applies()
Errors should use RBKeys instead

Deal with the issue of multiple RB keys


Create mechanism to set default application per SpiType

Add support for SockJS

failureHandler

.failureHandler(ctx -> {
			if (ctx.statusCode() == HttpServletResponse.SC_NOT_FOUND) {
				ctx.reroute("/404");
			} else if (ctx.statusCode() == HttpServletResponse.SC_INTERNAL_SERVER_ERROR) {
				ctx.reroute("/error");
			} else {
				ctx.next();
			}
		});


CorsHandler

// The handler adds a CSRF token to requests which mutate state. In
// order change the state a (XSRF-TOKEN) cookie is set with a unique
// token, that is expected to be sent back in a (X-XSRF-TOKEN) header.
CSRFHandler

// The handler prevents DDOS attacks

BodyHandler



Create custom font cache provider for PDF library

Add TaskImages, enhance existing ones

Agent Availability Schedule

Probe cache=true in fusion

Start Jvm with --illegal-access=permit

// Improve security
		ctx.response()

				// prevents Internet Explorer from MIME -
				// sniffing a
				// response away from the declared content-type
				.putHeader("X-Content-Type-Options", "nosniff")
				// Strict HTTPS (for about ~6Months)
				.putHeader("Strict-Transport-Security", "max-age=" + 15768000)
				// IE8+ do not allow opening of attachments in
				// the context
				// of this resource
				.putHeader("X-Download-Options", "noopen")
				// enable XSS for IE
				.putHeader("X-XSS-Protection", "1; mode=block")
				// deny frames
				.putHeader("X-FRAME-OPTIONS", "DENY");
